function setup_aws_credentials() {
    profile_name=$1
    role_arn=`/usr/bin/grep -A4 "$profile_name\]" ~/.aws/credentials|/usr/bin/grep role_arn|sed 's/^.*arn:/arn:/g'`

    if [[ -z "$role_arn" ]]
    then
        role_arn=`/usr/bin/grep -A4 "$profile_name\]" ~/.aws/config|/usr/bin/grep role_arn|sed 's/^.*arn:/arn:/g'`
    fi

    local stscredentials
    stscredentials=$(aws sts assume-role \
        --profile $profile_name \
        --role-arn "${role_arn}" \
        --role-session-name something \
        --query '[Credentials.SessionToken,Credentials.AccessKeyId,Credentials.SecretAccessKey]' \
        --output text)

    AWS_ACCESS_KEY_ID=$(echo "${stscredentials}" | awk '{print $2}')
    AWS_SECRET_ACCESS_KEY=$(echo "${stscredentials}" | awk '{print $3}')
    AWS_SESSION_TOKEN=$(echo "${stscredentials}" | awk '{print $1}')
    AWS_SECURITY_TOKEN=$(echo "${stscredentials}" | awk '{print $1}')

    region=$(/usr/bin/grep -A4 "\[$profile_name\]" ~/.aws/credentials|/usr/bin/grep region|sed s/'.*=[ ]'//g)
    if [ $region ]
    then
        AWS_DEFAULT_REGION=$region
        export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN AWS_DEFAULT_REGION
    else
        export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN
    fi

    echo "Default AWS region set to '$region'"
    echo "AWS env variables set:"
    printenv | grep AWS | sed 's;=.*;;' | sort
}


function mkdircd()
{
    mkdir -p -- "$1" && cd -P -- "$1"
}

function denter () {
	docker exec -it $1 /bin/bash
}

function start_musement(){
    open --background -a /Applications/Docker.app
    open /Applications/PhpStorm.app

    sleep 15
    while ! docker system info > /dev/null 2>&1; do sleep 2; done
    cd /Users/bonte/work/musement/docker-dev
    docker-compose up -d
#    cd /Users/bonte/work/musement/business-platform
#    docker-compose up -d
  cd /Users/bonte/work/musement/musement-core 
}

function stop_musement(){
    cd /Users/bonte/work/musement/docker-dev
    docker-compose down
 #   cd /Users/bonte/work/musement/business-platform
 #   docker-compose down
    pkill -x Docker
}

function musement_post_pull_core(){
    cd /Users/bonte/work/musement/musement-core
    rm -fr app/cache
    docker exec -it musement_fpm composer install --no-interaction
    docker exec -it musement_fpm php bin/console doctrine:migrations:migrate --no-interaction
    docker exec -it musement_fpm composer prepare-test-env
    curl https://musement.localhost/admin/dashboard -k
    curl https://musement.localhost/app_dev.php/admim/dashboard -k
    curl https://musement.localhost/admin/dashboard -k
    curl https://musement.localhost/app_dev.php/_profiler/ -k
}

function subdir () {
  reset="\033[0m"
  red="\033[01;31m"
  cyan="\033[01;36m"

  if [[ $# -eq 0 ]]; then
    echo "${red}There is no command to run on each subdir${red}"
  else
    ls -d */ | xargs -n1 bash -c 'cd $0; echo -e "'"${reset}${cyan}"'-------------------------\n--- '"$(echo "$@")"' (in $0)\n-------------------------'"${cyan}${reset}"'";'"$(echo "$@")"';echo -e "\n"'
  fi
}
